plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
}
ext {
    springBootVersion = '3.2.5'
}
group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(20)
    }
    sourceCompatibility = JavaVersion.VERSION_17  // –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Java 17
    targetCompatibility = JavaVersion.VERSION_17  // –±–∞–π—Ç-–∫–æ–¥ –ø–æ–¥ Java 17
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'at.favre.lib:bcrypt:0.9.0'
    implementation 'org.postgresql:postgresql:42.7.3'

}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('welcome') {
    group = 'custom'
    doLast {
        println "welcome from katya pim"
    }
}

tasks.register('custom-compile', Exec) {
    description = "–∫–æ–º–ø–∏–ª—è—Ü–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"
    group = 'custom'

    def srcDir = "src/main/java/com/example" // –ø–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏
    def outputDir = layout.buildDirectory.dir("classes/java/main").get().asFile.absolutePath

    def javaFiles = fileTree(srcDir).filter { it.name.endsWith('.java') }.files
    def javaFilesPaths = javaFiles.collect { it.absolutePath }

    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º classpath = –ø–∞–ø–∫–∞ —Å –∫–ª–∞—Å—Å–∞–º–∏ + –º–æ–¥—É–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    def classpath = sourceSets.main.compileClasspath.asPath
    // Gradle uses the sourceSets API to define and manage the source code structure of a project.

    commandLine("javac",
            "-d", outputDir,
            "-cp", classpath,
            *javaFilesPaths) // spread-–æ–ø–µ—Ä–∞—Ç–æ—Ä (—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã)

//    doFirst {
//        println "classpath: $classpath"
//        println "–∏—Å—Ö–æ–¥–Ω–∏–∫–∏: ${javaFilesPaths.join('\n')}"
//    }

    doLast {
        println "‚úÖ–≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã –≤: ${outputDir.replace(projectDir.absolutePath + '/', '')}"
    }
}

springBoot {
    mainClass = 'com.example.web4_2.Web4Application' // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∫–ª–∞—Å—Å —Å `@SpringBootApplication`
}

tasks.register('custom-build') {
    group = "custom"
    description = " –∫–æ–º–ø–∏–ª—è—Ü–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∏—Ö —É–ø–∞–∫–æ–≤–∫–∞ –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π jar-–∞—Ä—Ö–∏–≤. –ö–æ–º–ø–∏–ª—è—Ü–∏—é –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–æ–¥–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –≤—ã–∑–æ–≤–∞ —Ü–µ–ª–∏ compile"

    dependsOn 'custom-compile'

    def outputDir = layout.buildDirectory.dir("classes/java/main").get().asFile
    def fatJar = layout.buildDirectory.file("jar/${project.name}-${project.version}.jar").get().asFile
    def tempDir = layout.buildDirectory.dir("tmp-fat").get().asFile
    def manifestFile = layout.buildDirectory.file("manifest/MANIFEST.MF").get().asFile

    doFirst {
        println "üõ†Ô∏è –Ω–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É fat-jar..."

        tempDir.deleteDir()
        tempDir.mkdirs()

        copy {
            from outputDir
            into tempDir
        }

        copy {
            from layout.projectDirectory.dir("src/main/resources")
            into tempDir
        }

        configurations.runtimeClasspath.files.each { file ->
            if (file.name.endsWith(".jar")) {
                copy {
                    from zipTree(file)
                    into tempDir

                    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
                }
            }
        }
        println "üõ† —Å–æ–∑–¥–∞—é –º–∞–Ω–∏—Ñ–µ—Å—Ç-—Ñ–∞–π–ª..."

        manifestFile.parentFile.mkdirs()
        manifestFile.text = """\
Manifest-Version: 1.0
Main-Class: com.example.web4_2.Web4Application
""".replace("\n", "\r\n")

    }
    doLast {
        exec {
            executable = "jar"
            args = ["cvfm",
                    fatJar.absolutePath,
                    manifestFile.absolutePath,
                    "-C", tempDir.absolutePath, "."]
        }
        println "‚úÖ jar-–∞—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω: ${fatJar.absolutePath.replace(projectDir.absolutePath + '/', '')}"
    }
}


tasks.register('custom-clean', Exec) {
    group = "custom"
    description = "—É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤, –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤–∏ jar-–∞—Ä—Ö–∏–≤–∞"

    def buildDir = layout.buildDirectory.get().asFile.absolutePath
    println buildDir
//    def jarFile = layout.buildDirectory.file("jar/${project.name}-${project.version}.jar").get().asFile

    commandLine "rm", "-rf", buildDir
//    commandLine("rm", "-rf", jarFile)

    doLast {
        println "‚úÖ–≤—Å–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ jar-–∞—Ä—Ö–∏–≤—ã —É–¥–∞–ª–µ–Ω—ã"
    }
}

tasks.register("custom-native2ascii") {

    group = "custom"
    description = "–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ native2ascii –¥–ª—è –∫–æ–ø–∏–π —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ " +
            "(–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –≤—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–Ω–µ—Å—Ç–∏ –∏–∑ –∫–ª–∞—Å—Å–æ–≤ –≤ —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏)"

    def convertToUnicode = new GroovyShell().evaluate(file('scripts/convertToUnicode.groovy'))


    def inputDir = file("src/main/resources/")
    def outputDir = layout.buildDirectory.dir("native2ascii").get().asFile

    inputs.dir inputDir
    outputs.dir outputDir

    doLast {
        if (!outputDir.exists()) {
            outputDir.mkdirs()
        }
        // Process each .properties file in the input directory
        fileTree(inputDir).matching {
            include "**/messages*.properties"
        }.each { file ->
            def relativePath = inputDir.toPath().relativize(file.toPath()).toString()
            def outputFile = new File(outputDir, relativePath)
            outputFile.parentFile.mkdirs()
            println "converting: ${file}"
            outputFile.withWriter("UTF-8") { writer ->
                file.eachLine("UTF-8") { line ->
                    writer.writeLine((String) convertToUnicode(line))
                }
            }
        }
        println "‚úÖ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤: ${outputDir}"
    }

}


tasks.register("custom-scp", Exec) {
    group = "custom"
    description = "–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ scp –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Å–±–æ—Ä–∫–∏. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (—Ü–µ–ª—å build)"

    dependsOn("custom-build")

    def jarFile = layout.buildDirectory.file("jar/${project.name}-${project.version}.jar").get().asFile.absolutePath

    def remoteHost = "helios.se.ifmo.ru"
    def remoteUser = "s409342"
    def remoteDirWebLab4 = "~/web_lab4"


    doFirst {
        println "Copying JAR to ${remoteUser}@${remoteHost}:${remoteDirWebLab4}"
    }

    commandLine "scp", "-P 2222", jarFile, "${remoteUser}@${remoteHost}:${remoteDirWebLab4}"

    doLast {
        println '‚úÖjar-–∞—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä'
    }
}
